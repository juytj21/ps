import java.util.Scanner;

public class B_1753 {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int V = s.nextInt();
        int E = s.nextInt();
        int K = s.nextInt();

        for (int i = 0; i < E; i++) {

        }

    }
}

/**
 1. 아이디어
 * 한 점 시작, 모든 거리: 다익스트라
 * 간선, 인접리스트 저장
 * 거리배열 무한대 초기화
 * 시작점 : 거리배열 0, 힙에 넣어주기
 * 립에서 빼면서 다음의 것들 수행
 *      - 최신값인지 먼저 확인
 *      - 간선을 타고 간 비용이 더 작으면 갱신

 2. 시간복잡도
 * 다익스트라: 0(ElgV)
 *      - E : 3e5
 *      - V : 2e4   lgV ~= 20
 *      - ElgV = 6e6 > 가능

 3. 변수
 * 힙: (비용, 노드번호)
 * 거리 배열: 비용: int[]
 * 간선 저장, 인접리스트: (비용, 노드번호)[]
 */

/**
아이디어
* 한 점에서 다른 모든 점으로의 최단경로 > 다익스트라 사용
* 모든 점 거리 초기값 무한대로 설정
* 시작점 거리 0 설정 및 힙에 추가
* 힙에서 하나씩 빼면서 수행할 것
  * 현재 거리가 새로운 간선 거칠 때보다 크다면 갱신
  * 새로운 거리 힙에 추가

시간 복잡도
* 다익스트라 시간복잡도 ElgV
  * E : 3e5, lgV = 20
* O(ElgV) = 6e6 > 가능

변수
* 다익스트라 사용 힙: (비용(int), 다음 노드(int))[]
  * 비용 최대값: 10 * 2e4 = 2e5 => INT 가능
  * 다음 노드: 2e4 => INT 가능
* 거리 배열: int[]
  * 거리 최대값: 10 * 2e4 = 2e5 => INT 가능
* 간선, 인접 리스트: (비용(int), 다음 노드(int))[]
*/